// Kids English Learning App Database Schema
generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Main User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // App-specific fields
  accountType   AccountType @default(PARENT)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Parent-specific fields
  parentProfile ParentProfile?
  children      Child[]
}

model ParentProfile {
  id       String @id @default(cuid())
  userId   String @unique
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Parent preferences
  emailNotifications Boolean @default(true)
  weeklyReports     Boolean @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Child profiles
model Child {
  id        String   @id @default(cuid())
  name      String
  age       Int
  ageGroup  AgeGroup
  parentId  String
  parent    User     @relation(fields: [parentId], references: [id], onDelete: Cascade)
  
  // Child progress and customization
  avatar    Avatar?
  level     Int      @default(1)
  xp        Int      @default(0)
  coins     Int      @default(100)
  
  // Progress tracking
  progress  Progress[]
  achievements Achievement[]
  badges    Badge[]
  dailyChallenges DailyChallenge[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Avatar customization
model Avatar {
  id      String @id @default(cuid())
  childId String @unique
  child   Child  @relation(fields: [childId], references: [id], onDelete: Cascade)
  
  // Avatar components
  body      String @default("body1")
  face      String @default("face1")
  hair      String @default("hair1")
  clothing  String @default("clothing1")
  accessory String @default("accessory1")
  
  updatedAt DateTime @updatedAt
}

// Learning modules and activities
model LearningModule {
  id          String @id @default(cuid())
  name        String
  type        ModuleType
  ageGroup    AgeGroup
  description String?
  
  activities  Activity[]
  progress    Progress[]
}

model Activity {
  id          String @id @default(cuid())
  moduleId    String
  module      LearningModule @relation(fields: [moduleId], references: [id])
  
  name        String
  type        ActivityType
  ageGroup    AgeGroup
  difficulty  Int @default(1)
  
  // Activity content
  content     Json? // Stores activity-specific data
  instructions String?
  points      Int @default(10)
  
  progress    Progress[]
  createdAt   DateTime @default(now())
}

// Progress tracking
model Progress {
  id          String @id @default(cuid())
  childId     String
  child       Child @relation(fields: [childId], references: [id], onDelete: Cascade)
  
  moduleId    String?
  module      LearningModule? @relation(fields: [moduleId], references: [id])
  
  activityId  String?
  activity    Activity? @relation(fields: [activityId], references: [id])
  
  // Progress details
  completed   Boolean @default(false)
  score       Int?
  timeSpent   Int? // in seconds
  attempts    Int @default(1)
  
  completedAt DateTime?
  createdAt   DateTime @default(now())
}

// Achievement system
model Achievement {
  id          String @id @default(cuid())
  childId     String
  child       Child @relation(fields: [childId], references: [id], onDelete: Cascade)
  
  name        String
  description String
  type        AchievementType
  icon        String
  
  unlockedAt  DateTime @default(now())
}

// Badge system
model Badge {
  id          String @id @default(cuid())
  childId     String
  child       Child @relation(fields: [childId], references: [id], onDelete: Cascade)
  
  name        String
  description String
  icon        String
  category    BadgeCategory
  
  earnedAt    DateTime @default(now())
}

// Daily challenges
model DailyChallenge {
  id          String @id @default(cuid())
  childId     String
  child       Child @relation(fields: [childId], references: [id], onDelete: Cascade)
  
  name        String
  description String
  type        ChallengeType
  target      Int // Target number (words, activities, etc.)
  current     Int @default(0)
  reward      Int // XP or coins reward
  
  completed   Boolean @default(false)
  date        DateTime @default(now())
  completedAt DateTime?
}

// Vocabulary and content
model VocabularyWord {
  id          String @id @default(cuid())
  word        String
  definition  String
  pronunciation String?
  ageGroup    AgeGroup
  category    String // animals, colors, objects, etc.
  imageUrl    String?
  audioUrl    String?
  
  createdAt   DateTime @default(now())
}

// Stories for activities
model Story {
  id          String @id @default(cuid())
  title       String
  content     String
  ageGroup    AgeGroup
  imageUrl    String?
  audioUrl    String?
  
  createdAt   DateTime @default(now())
}

// Enums
enum AccountType {
  PARENT
  CHILD
}

enum AgeGroup {
  AGE_3_5
  AGE_6_8
  AGE_9_12
}

enum ModuleType {
  SPEAKING
  WRITING_SPELLING
  GAMES
}

enum ActivityType {
  PRONUNCIATION
  ROLE_PLAY
  SING_SPEAK
  LETTER_TRACING
  WORD_BUILDER
  SENTENCE_PUZZLE
  CREATIVE_WRITING
  MEMORY_MATCH
  STORY_ADVENTURE
  SPELLING_BEE
  QUIZ_ARENA
  WORD_HUNT
}

enum AchievementType {
  FIRST_ACTIVITY
  STREAK_MASTER
  VOCABULARY_EXPERT
  PRONUNCIATION_PRO
  CREATIVE_WRITER
  GAME_CHAMPION
  LEVEL_UP
}

enum BadgeCategory {
  SPEAKING
  WRITING
  GAMES
  PROGRESS
  SPECIAL
}

enum ChallengeType {
  COMPLETE_ACTIVITIES
  LEARN_WORDS
  PRACTICE_PRONUNCIATION
  PLAY_GAMES
  CREATIVE_TASKS
}
